#!/usr/bin/env bash
#
# A pre-commit hook to Update Terraform module and state resource collections.
#
# When TF files have changed and the generated documentation has changed, this script
# will update the README.md file in the module's directory and exit with a
# status code of 1.
#
# Author: github.com/grocky

###############################################################################
# Get requirements line. This is the first line generated by terraform-docs
#
# Arguments:
#   File to inspect, a file path
# Outputs:
#   The line number of the requirements line
###############################################################################
function get_requirements_line() {
  filename="${1}"
  line_number=$(awk '/## Requirements/ { print NR }' ${filename})

  if [ -z ${line_number} ]; then
    line_number=1
  fi

  echo ${line_number}
}

###############################################################################
# Ensure the generated terraform docs are up to date
#
# Arguments:
#   Directory in which to update documentation.
# Side effects:
#   Updates the README.md in the provided directory if there are changes.
###############################################################################
function ensure_terraform_docs() {
  doc_file=$(realpath ${1}/README.md)

  # If the doc doesn't exit, let's create it.
  if [ ! -f ${doc_file} ]; then
    touch ${doc_file}
  fi

  doc_start=$(get_requirements_line ${doc_file})

  existing_header=$(head -n +$((doc_start - 1)) ${doc_file})

  existing_generated_doc=$(tail -n +${doc_start} ${doc_file})
  existing_generated_hash=$(echo ${existing_generated_doc} | md5)

  new_generated_doc=$(terraform-docs markdown ${m})
  new_generated_hash=$(echo ${new_generated_doc} | md5)

  if [ ${existing_generated_hash} != ${new_generated_hash} ]; then
    echo "Documentation change detected. Updating ${doc_file}."
    echo "${existing_header}" > ${doc_file}
    echo "${new_generated_doc}" >> ${doc_file}

    return 1
  fi
}

function generate_graph() {
  module="$1"
  cd "${module}"
  terraform graph > graph.dot
  dot -Tsvg graph.dot > graph.svg
}

###############################################################################
# Generate docs from a list of modules.
#
# Arguments:
#   A list of directories
# Returns:
#   The number of docs updated
###############################################################################
function generate_docs() {
  modules_to_check="$@"
  files_updated=0

  for m in ${modules_to_check}; do
    # If the directory doesn't exist, just skip it
    [ -d ${m} ] || continue
    ensure_terraform_docs $m
    if [ $? -gt 0 ]; then
      files_updated=$((files_updated + 1))
    fi
    if [[ "${m}" != *"modules"* ]]; then
      make ${m}/graph.svg
    fi
  done

  return ${files_updated}
}

generate_docs "$@"
